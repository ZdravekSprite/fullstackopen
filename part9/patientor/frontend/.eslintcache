[{"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\index.tsx":"1","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\state\\state.tsx":"2","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\types.ts":"3","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\AddPatientModal\\AddPatientForm.tsx":"4","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\AddPatientModal\\index.tsx":"5","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\App.tsx":"6","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\AddPatientModal\\FormField.tsx":"7","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\PatientListPage\\index.tsx":"8","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\components\\HealthRatingBar.tsx":"9","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\constants.ts":"10","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\state\\index.ts":"11","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\state\\reducer.ts":"12","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\PatientPage\\index.tsx":"13","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\PatientPage\\EntryDetail.tsx":"14","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\AddEntryModal\\index.tsx":"15","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\AddEntryModal\\AddEntryForm.tsx":"16"},{"size":301,"mtime":1606561684108,"results":"17","hashOfConfig":"18"},{"size":1037,"mtime":1608292252230,"results":"19","hashOfConfig":"18"},{"size":1265,"mtime":1608205388709,"results":"20","hashOfConfig":"18"},{"size":3008,"mtime":1606561765791,"results":"21","hashOfConfig":"18"},{"size":712,"mtime":1606561784267,"results":"22","hashOfConfig":"18"},{"size":1864,"mtime":1608369992378,"results":"23","hashOfConfig":"18"},{"size":2584,"mtime":1606561780079,"results":"24","hashOfConfig":"18"},{"size":2697,"mtime":1608290038041,"results":"25","hashOfConfig":"18"},{"size":629,"mtime":1606561807464,"results":"26","hashOfConfig":"18"},{"size":54,"mtime":1606561667565,"results":"27","hashOfConfig":"18"},{"size":51,"mtime":1606561847275,"results":"28","hashOfConfig":"18"},{"size":1917,"mtime":1608370153319,"results":"29","hashOfConfig":"18"},{"size":3916,"mtime":1608829744779,"results":"30","hashOfConfig":"18"},{"size":1920,"mtime":1608371429381,"results":"31","hashOfConfig":"18"},{"size":717,"mtime":1608721397205,"results":"32","hashOfConfig":"18"},{"size":2807,"mtime":1608829875490,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1ghfvia",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\index.tsx",[],[],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\state\\state.tsx",[],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\types.ts",[],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\AddPatientModal\\AddPatientForm.tsx",[],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\AddPatientModal\\index.tsx",["71"],"import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\App.tsx",["72","73"],"import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\r\nimport { Button, Divider, Header, Container } from \"semantic-ui-react\";\r\n\r\nimport { apiBaseUrl } from \"./constants\";\r\nimport { useStateValue, setPatientList, setDiagnosisList } from \"./state\";\r\nimport { Patient, Diagnosis } from \"./types\";\r\n\r\nimport PatientListPage from \"./PatientListPage\";\r\nimport PatientPage from \"./PatientPage\";\r\n\r\nconst App: React.FC = () => {\r\n  const [, dispatch] = useStateValue();\r\n  React.useEffect(() => {\r\n    // eslint-disable-next-line\r\n    axios.get<void>(`${apiBaseUrl}/ping`);\r\n\r\n    const fetchPatientList = async () => {\r\n      try {\r\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\r\n          `${apiBaseUrl}/patients`\r\n        );\r\n        dispatch(setPatientList(patientListFromApi));\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n\r\n    const fetchDiagnosisList = async () => {\r\n      try {\r\n        const { data: diagnosisList } = await axios.get<Diagnosis[]>(\r\n          `${apiBaseUrl}/diagnoses`\r\n        );\r\n        dispatch(setDiagnosisList(diagnosisList));\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    // eslint-disable-next-line\r\n    fetchDiagnosisList();\r\n    fetchPatientList();\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Container>\r\n          <Header as=\"h1\">Patientor</Header>\r\n          <Button as={Link} to=\"/\" primary>\r\n            Home\r\n          </Button>\r\n          <Divider hidden />\r\n          <Switch>\r\n            <Route path=\"/patients/:id\" render={() => <PatientPage /> } />\r\n            <Route path=\"/\" render={() => <PatientListPage />} />\r\n          </Switch>\r\n        </Container>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\AddPatientModal\\FormField.tsx",["74"],"import React from \"react\";\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Diagnosis, Gender } from \"../types\";\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: GenderOption[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({ field, label, min, max }) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\n}) => {\n  const field = \"diagnosisCodes\";\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\PatientListPage\\index.tsx",[],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\components\\HealthRatingBar.tsx",["75"],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\constants.ts",[],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\state\\index.ts",[],[],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\state\\reducer.ts",[],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\PatientPage\\index.tsx",[],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\PatientPage\\EntryDetail.tsx",[],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\AddEntryModal\\index.tsx",["76"],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\AddEntryModal\\AddEntryForm.tsx",[],{"ruleId":"77","severity":1,"message":"78","line":12,"column":25,"nodeType":"79","messageId":"80","endLine":12,"endColumn":76},{"ruleId":"81","severity":2,"message":"82","line":35,"column":18,"nodeType":"83","messageId":"84","endLine":35,"endColumn":34},{"ruleId":"85","severity":2,"message":"86","line":42,"column":5,"nodeType":"87","messageId":"88","endLine":42,"endColumn":24,"suggestions":"89"},{"ruleId":"77","severity":1,"message":"78","line":76,"column":35,"nodeType":"79","messageId":"80","endLine":84,"endColumn":6},{"ruleId":"77","severity":1,"message":"78","line":16,"column":25,"nodeType":"79","messageId":"80","endLine":16,"endColumn":60},{"ruleId":"77","severity":1,"message":"78","line":12,"column":23,"nodeType":"79","messageId":"80","endLine":12,"endColumn":74},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-unsafe-call","Unsafe call of an any typed value.","Identifier","unsafeCall","@typescript-eslint/no-floating-promises","Promises must be handled appropriately or explicitly marked as ignored with the `void` operator.","ExpressionStatement","floatingVoid",["90"],{"messageId":"91","fix":"92","desc":"93"},"floatingFixVoid",{"range":"94","text":"95"},"Add void operator to ignore.",[1320,1339],"void fetchPatientList();"]