[{"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\index.tsx":"1","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\state\\state.tsx":"2","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\types.ts":"3","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\AddPatientModal\\AddPatientForm.tsx":"4","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\AddPatientModal\\index.tsx":"5","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\App.tsx":"6","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\AddPatientModal\\FormField.tsx":"7","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\PatientListPage\\index.tsx":"8","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\components\\HealthRatingBar.tsx":"9","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\constants.ts":"10","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\state\\index.ts":"11","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\state\\reducer.ts":"12"},{"size":301,"mtime":1606561684108,"results":"13","hashOfConfig":"14"},{"size":864,"mtime":1606556825680,"results":"15","hashOfConfig":"14"},{"size":300,"mtime":1606561702433,"results":"16","hashOfConfig":"14"},{"size":3008,"mtime":1606561765791,"results":"17","hashOfConfig":"14"},{"size":712,"mtime":1606561784267,"results":"18","hashOfConfig":"14"},{"size":1344,"mtime":1606575961753,"results":"19","hashOfConfig":"14"},{"size":2584,"mtime":1606561780079,"results":"20","hashOfConfig":"14"},{"size":2552,"mtime":1607959012687,"results":"21","hashOfConfig":"14"},{"size":629,"mtime":1606561807464,"results":"22","hashOfConfig":"14"},{"size":54,"mtime":1606561667565,"results":"23","hashOfConfig":"14"},{"size":51,"mtime":1606561847275,"results":"24","hashOfConfig":"14"},{"size":789,"mtime":1606561852512,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1ghfvia",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\index.tsx",[],[],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\state\\state.tsx",[],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\types.ts",[],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\AddPatientModal\\AddPatientForm.tsx",[],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\AddPatientModal\\index.tsx",["53"],"import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\App.tsx",[],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\AddPatientModal\\FormField.tsx",["54"],"import React from \"react\";\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Diagnosis, Gender } from \"../types\";\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: GenderOption[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({ field, label, min, max }) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\n}) => {\n  const field = \"diagnosisCodes\";\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};","C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\PatientListPage\\index.tsx",[],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\components\\HealthRatingBar.tsx",["55"],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\constants.ts",[],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\state\\index.ts",[],"C:\\git\\fullstackopen\\part9\\patientor\\frontend\\src\\state\\reducer.ts",[],{"ruleId":"56","severity":1,"message":"57","line":12,"column":25,"nodeType":"58","messageId":"59","endLine":12,"endColumn":76},{"ruleId":"56","severity":1,"message":"57","line":76,"column":35,"nodeType":"58","messageId":"59","endLine":84,"endColumn":6},{"ruleId":"56","severity":1,"message":"57","line":16,"column":25,"nodeType":"58","messageId":"59","endLine":16,"endColumn":60},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType"]